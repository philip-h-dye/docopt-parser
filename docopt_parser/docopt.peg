// __version__ = 'analysis-not-for-release-0.6.7'

docopt = intro* usage other_sections trailing* newline* EOF
// docopt = usage newline* EOF
// docopt = program argument*
// docopt = usage_pattern trailing*
// docopt = choice trailing*

other_sections = other*

other = blankline ( operand_section / options_section / description )

// Intro -- typically a single line 
// -----

intro = newline* !usage_entry line+ newline

// Usage Patterns
// --------------

usage = newline* usage_entry newline* usage_line+

usage_entry = r'(?i)Usage\s*:'

usage_line = usage_pattern newline / usage_pattern EOF
usage_pattern = OR? program choice?

program = string_no_whitespace

// Left recursive ?
// choice = expression BAR choice / expression
// choice = expression ( BAR choice )?
// easier to process as it does not cascading
choice = expression ( BAR expression )*

// expression = ( ( optional / required / argument ) repeated? )+
expression = repeatable+
repeatable = term repeating?
term = ( optional / required / argument )
repeating = '...'

optional = LBRACKET choice RBRACKET
required = LPAREN choice RPAREN
argument = ( option / operand / command )

option = long / short
// short option allowing for stacking or an immediate option-argument
//   semantic analysis necessary to determine such
//   and frankly, necessary for short_no_arg also.  If short_no_arg is
//   first, '-fuz' becomes [ short_no_arg '-f', command 'uz' ]
short = short_stacked / short_no_arg
short_no_arg = r'-[\w]'
short_stacked = r'-[\w][\w]+'
long = long_with_eq_arg / long_no_arg
long_no_arg = r'--[\w][-_\w]*'
long_with_eq_arg = long_with_eq_caps / long_with_eq_angle
long_with_eq_caps = r"--[\w][-_\w]*=[A-Z][_A-Z]*"
long_with_eq_angle = r"--[\w][-_\w]*=<[-_:\w]+>"

operand = operand_all_caps / operand_angled
operand_all_caps = r'\b[A-Z][_A-Z0-9]+\b'
operand_angled = r'<[-_:\w]+>'

command = r'[^\s\n\[\]\(\)\|]+'
// Without \[\]\(\)\|, optional/required/choice become sequences of commands

// Program Description
// -------------------

description = line+
line = !operand !option ( words newline / words EOF )
words = word+
word = string_no_whitespace

// Operand / Positional Arguments
// ------------------------------

// TRAILING when after an options section with multiline help
operand_section = newline* operand_intro? operand_line+
operand_intro = line+
operand_line = operand_detail newline / operand_detail EOF
operand_detail = operand operand_help?
operand_help = words ( newline !operand operand_help )*

// Options
// -------

options_section = newline* options_intro? option_line+

options_intro = line+

option_line = option_detail newline / option_detail EOF
option_detail = option_list option_help?

option_list = option_single (COMMA? option_list )?
option_single = short_with_arg / long_with_arg / short_no_arg / long_no_arg
option_help = words ( newline !option_single option_help )*

short_with_arg = short_no_arg operand
long_with_arg = long_with_eq_arg / long_with_gap_arg
long_with_gap_arg = long_no_arg operand

// Trailing Text -- a catchall
// -------------

trailing = trailing_line+
trailing_line = trailing_strings newline / trailing_strings EOF
trailing_strings = string_no_whitespace+

// General Utility
// ---------------

string_no_whitespace = r'[^\s\n]+'

blankline = &newline newline+

newline = r'[\n]'

OR = 'or'

LBRACKET = '['
RBRACKET = ']'
LPAREN = '('
RPAREN = ')'
BAR = '|'
COMMA = ','
