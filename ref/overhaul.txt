Overhaul: Complete grammar, split code, add passes, re-engineered tests

* docopt.peg
  - parses all of the 0.5.8 tests and numerous added ones.
  - To facilitate idenfication and implementation of simplication and
    later parser generation, switched rule style from a single, as
    high as feasible, level concept per rule (tight/less-is-more), to
    a gradual composition of simple rules.

    Previously:
      expression = ( ( optional / required / argument ) repeated? )+

    Now:
      expression = repeatable+
      repeatable = term repeating?
      term = ( optional / required / argument )

    Previously, identifying and properly applying the repeating aspect
    to the prior term required two dozen lines of brittle code mucking
    about in the guts of the child nodes of all expression nodes.

    Now it takes but a few clean lines on the repeatable node.  And some
    simpler asserts assure that our understanding of Arpeggio's generated
    parse tree remain accurate.

    Moral:  Grammar brevity is fine if you don't need to work with
            parse tree.  Composition is better when you need fine
	    grained control of the elements.

* __init__.py split into separate modules per major class/pass

    __init__.py        simply imports the modules, no real work here

    core.py            docopt parser engine, DocOptParserPEG, other classes
                       are passes DocOptParser_SimplifyVisitor_PassN

    pass1.py           Adjustments that are simpler and work best with the
                       raw form of the parse tree i.e. repeatable

    pass2.py           Primary simplification, retain only nodes that are
                       either necessary to generate parser or are needed at
		       a higher level to properly do such

    pass3.py           Remove any bookkeeping nodes retained solely for
                       use during simplification.

    listview.py        Prettier rendition without the parse node clutter.

    Unlike 0.5.8, simplication now strictly maintains a valid Arpeggio Parse
    Tree.  The list view is for only a clean, tight display of the parse tree.

* tests
  - scenarios.py       - Restructured general tests, closely associated tests
                         grouped and progress from simple to complex.
		       - 'files' is now 'programs', they are program __doc__.

  - run-tests.py       - simpler usage patterns by breaking out the modes
                       - clean top-down flow, main only contains the overall
		         flow, all bookkeeping and processing is done elsewere
		       - all parsing passes now performed by single small
		         function rather than the prior spaghetti-ish code
		       - supports writing input and each pass outputs to
		         for later use in regression tests (.../validation/).

